table,"[",
"label = '{",
table,"(nrow: ",rows,")", "|",atributes,
"}']")
}
return(nodes)
}
nodes <- read_nodes(.self$path_to, .self$tables)
edges <- lapply(seq_along(.self$relations), function(v) paste0(names(.self$relations)[[v]], '->' ,.self$relations[v]))
edges <- paste0(edges, collapse = ' ')
DiagrammeR::grViz(paste0('digraph G {
fontname = "Bitstream Vera Sans"
fontsize = 6
node [
fontname = "Bitstream Vera Sans"
fontsize = 6
margin = "0.2,0.05"
shape = "record"
style = "filled"
fillcolor = "cadetblue1"
]
edge [
arrowtail = "empty"
dir=back
]
',
nodes,
edges,
' }'),width = '100%', height = '100%')
}
.plot_diagram
.database_obj
.plot_diagram <- function() {
read_nodes <- function(database_dir, tables) {
nodes <- ""
for (table in tables) {
dataset <- readRDS(paste0(database_dir,table,'.RDS'))
dataset_names <- names(dataset)
dataset_class <- sapply(dataset, function(x) class(x))
atributes <- paste0(dataset_names," : ",dataset_class,'\\n', collapse = "")
rows <- nrow(dataset)
nodes <- paste0(nodes,
table,"[",
"label = '{",
table,"(nrow: ",rows,")", "|",atributes,
"}']")
}
return(nodes)
}
nodes <- read_nodes(.self$path_to, .self$tables)
edges <- lapply(seq_along(.self$relations), function(v) paste0(names(.self$relations)[[v]], '->' ,.self$relations[v]))
edges <- paste0(edges, collapse = ' ')
DiagrammeR::grViz(paste0('digraph G {
fontname = "Bitstream Vera Sans"
fontsize = 6
node [
fontname = "Bitstream Vera Sans"
fontsize = 6
margin = "0.2,0.05"
shape = "record"
style = "filled"
fillcolor = "cadetblue1"
]
edge [
arrowtail = "empty"
dir=back
]
',
nodes,
edges,
' }'),width = '100%', height = '100%')
}
.read <- function(dataset_name) {
# read rds
if (length(.self$tables) > 0){
if (dataset_name %in% .self$tables){
return(readRDS(paste0(.self$path_to, dataset, ".RDS")))
}
}
stop("dataset not found")
}
.save <- function(dataset, parent_name = c()) {
table_name <- deparse(substitute(dataset))
.self$tables <- .self$tables
if(length(parent_name) > 0){
if(!all(parent_name %in% tables)){
stop("undefined parent name in database")
}
}
saveRDS(dataset, paste0(.self$path_to,table_name,".RDS"))
if (length(parent_name) > 0) {
.self$relations[table_name] <- parent_name
}
saveRDS(.self, file = paste0(database$path_to,'/database'))
if (length(.self$tables) > 0){
if (table_name %in% .self$tables) {
return(TRUE)
}
}
.self$tables <- c(tables, table_name)
return(TRUE)
}
.delete <- function(dataset_name) {
if (length(.self$tables) > 0){
if (!dataset_name %in% .self$tables){
stop('dataset not found')
}
}
for (relation in .self$relations) {
if(dataset_name %in% relation){
stop(paste("removing this table will affect these tables:",relation, ",please save then with another or none parent", collapse = " "))
}
}
.self$tables <- .self$tables[!dataset_name == .self$tables]
if(!is.null(.self$relations[dataset_name])){
.self$relations[dataset_name] <- NULL
}
file.remove(paste0(database$path_to,dataset_name,".RDS"))
return(TRUE)
}
.database_obj <- setRefClass(
Class = 'database',
fields = list(path_to = 'character', tables = 'character', relations = 'list'),
methods = list(
initialize=function(path_to = NA_character_) {
.self$path_to <- path_to
},
save=.save,
read=.read,
delete=.delete,
plot_diagram=.plot_diagram
)
)
.database_obj
.database_obj$plot_diagram
.database_obj$plot_diagram()
.database_obj$methods()
.database_obj$methods(2)
.database_obj$methods('plot_diagram')
path_to = '/home/gian/Projects/PipeAndCrud/database/'
database <- .database_obj$new(path_to = path_to)
database <- .database_obj$new(path_to = path_to)
.database_obj <- setRefClass(
Class = 'database',
fields = list(path_to = 'character', tables = 'character', relations = 'list'),
methods = list(
initialize=function(path_to = NA_character_) {
.self$path_to <- path_to
},
save=.save,
read=.read,
delete=.delete
#plot_diagram=.plot_diagram
)
)
database <- .database_obj$new(path_to = path_to)
.database_obj <- setRefClass(
Class = 'database',
fields = list(path_to = 'character', tables = 'character', relations = 'list'),
methods = list(
initialize=function(path_to = NA_character_) {
.self$path_to <- path_to
},
save=.save,
read=.read,
delete=.delete,
plot_diagram=.plot_diagram
)
)
database <- .database_obj$new(path_to = path_to)
database
database <- .database_obj$new(path_to = path_to)
database <- .database_obj$new(path_to = path_to)
database <- .database_obj$new(path_to = path_to)
database <- .database_obj$new(path_to = path_to)
database$plot_diagram
database$plot_diagram()
database
expect_true(database$save(cars))
library(testthat)
expect_true(database$save(cars))
expect_true(database$save(iris,'cars'))
expect_error(database$delete('cars'))
expect_true(database$save(cars))
expect_true(database$save(iris,'cars'))
database
database$plot_diagram()
.database_obj$import()
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
finfo = file.info("/home/gian/Projects/t2_seguranca/video_03.mp4")
finfo
toread= file("/home/gian/Projects/t2_seguranca/video_03.mp4", "rb")
toread
alldata = readBin(toread, integer(), size=1, n = finfo$size, endian="little")
alldata
alldata
alldata = readBin(toread, "raw", size=1, n = finfo$size, endian="little")
alldata
finfo = file.info("/home/gian/Projects/t2_seguranca/video_03.mp4")
toread= file("/home/gian/Projects/t2_seguranca/video_03.mp4", "rb")
alldata = readBin(toread, "raw", size=1, n = finfo$size, endian="little")
alldata
alldata
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
di
dim()
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
library(PipeAndCrud)
source("~/Projects/r_project_template/R/transformation/transformation_functions.R")
source("~/Projects/r_project_template/R/transformation/transformation_functions.R")
source("~/Projects/r_project_template/R/transformation/transformation_functions.R")
library(PipeAndCrud)
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database
database$plot_diagram()
database$plot_diagram().render()
class(database$plot_diagram())
htmlwidgets::
vignette("develop_intro", package = "htmlwidgets")
iris
iris
iris3
iris
kmeans(iris)
kmeans(iris, 3)
kmeans(iris[1:3], 3, )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
kmeans(iris[1:3], 3 )
teste <- kmeans(iris[1:3], 3 )
teste
plot(teste)
iris_teste <- cbind(iris,teste$cluster)
iris_teste
teste <- kmeans(iris[1:4], 3 )
teste
iris_teste <- cbind(iris,teste$cluster)
iris_teste
teste <- kmeans(iris[1:4], 3 )
iris_teste <- cbind(iris,teste$cluster)
iris_teste
teste
teste <- kmeans(iris[1:4], 3 ,trace = T)
teste <- kmeans(iris[1:4], 6 ,trace = T)
teste
iris_teste <- cbind(iris,teste$cluster)
iris_teste
library(PipeAndCrud)
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database$plot_diagram()
finfo = file.info("/home/gian/Projects/t2_seguranca/video_03.mp4")
toread= file("/home/gian/Projects/t2_seguranca/video_03.mp4", "rb")
alldata = readBin(toread, "raw", size=1, n = finfo$size, endian="little")
alldata
alldata
library(digest)
alldata[1]
alldata[2]
alldata[3]
alldata[4]
alldata[1:1024]
library(data.table)
setDT(alldata)
length(alldata)
0 %% 1024
1 %% 1024
1024 %% 1024
chunk_size <- 1
chunk <- c(alldata[1])
chunk
chunk_list <- list()
chunk_list
chunk_list
chunk <- c(chunk, byte)
chunk
append(chunk_list, chunk)
append(chunk_list, chunk, )
paste0(chunk,collapse = "")
block <- paste0(chunk,collapse = "")
block
library(digest)
library(openssl)
sha256(block)
block_key <- ""
block <- paste0(chunk, block_key ,collapse = "")
block
sha256(block)
append(chunk_list, chunk )
chunk_index <- 1
chunk_list[chunk_index]
chunk_list[chunk_index] <-  chunk
chunk_list
chunk_list[chunk_index] <-  block
append(chunk_list, block)
append(chunk_list, block)
length(chunk_list)
length(chunk_list)
chunk_list <- c()
chunk_list
chunk_list
chunk_list <- c(chunk_list, block)
chunk_list
chunk_list <- c(chunk_list, block)
source('~/Projects/t2_seguranca/script.R', echo=TRUE)
chunk_list
chunk_list
chunk_list <- c()
chunk_list
chunk_list
library(openssl)
finfo = file.info("/home/gian/Projects/t2_seguranca/video_03.mp4")
toread= file("/home/gian/Projects/t2_seguranca/video_03.mp4", "rb")
alldata = readBin(toread, "raw", size=1, n = finfo$size, endian="little")
length(alldata)
chunk_size <- 1
chunk <- c(alldata[1])
chunk_list <- c()
chunk_index <- 1
1024*3
alldata[1:3072]
for (byte in alldata[1:3072]) {
if (chunk_size %% 1024 == 0) {
block <- paste0(chunk ,collapse = "")
chunk_list <- c(chunk_list, block)
}
chunk <- c(chunk, byte)
chunk_size <- chunk_size + 1
}
chunk_list
chunk_size <- 1
chunk <- c(alldata[1])
chunk_list <- c()
chunk_index <- 1
block
chunk <- ''
chunk
for (byte in alldata[1:3072]) {
if (chunk_size %% 1024 == 0) {
block <- paste0(chunk ,collapse = "")
chunk_list <- c(chunk_list, block)
chunk <- ''
}
chunk <- c(chunk, byte)
chunk_size <- chunk_size + 1
}
chunk_list
length(alldata)
length(alldata) / 1024
for (byte in alldata) {
if (chunk_size %% 1024 == 0) {
block <- paste0(chunk ,collapse = "")
chunk_list <- c(chunk_list, block)
print('.')
chunk <- ''
}
chunk <- c(chunk, byte)
chunk_size <- chunk_size + 1
}
chunk_size <- 1
chunk <- c(alldata[1])
chunk_list <- c()
chunk_index <- 1
for (byte in alldata) {
if (chunk_size %% 1024 == 0) {
block <- paste0(chunk ,collapse = "")
chunk_list <- c(chunk_list, block)
chunk <- ''
}
chunk <- c(chunk, byte)
chunk_size <- chunk_size + 1
}
length(chunk_list)
chunk_index <- length(chunk_list)
chunk_index
chunk_index
chunk_index:1
index <- chunk_index
index
block <- chunk_list[index]
block
block <- paste0(block, block_key)
block_key <- ""
block <- paste0(block, block_key)
block
chunk_list_crypted <- c()
sha256(block)
block_key <- sha256(block)
block_key
block_key <- ""
chunk_list_crypted <- c()
for (index in chunk_index:1) {
block <- chunk_list[index]
block <- paste0(block, block_key)
block_key <- sha256(block)
chunk_list_crypted[index] <- block
}
chunk_list_crypted
index
index
block_key
h0 <- block_key
finfo = file.info("/home/gian/Projects/t2_seguranca/video_05.mp4")
library(openssl)
finfo = file.info("/home/gian/Projects/t2_seguranca/video_05.mp4")
toread= file("/home/gian/Projects/t2_seguranca/video_05.mp4", "rb")
alldata = readBin(toread, "raw", size=1, n = finfo$size, endian="little")
length(alldata)
chunk_size <- 1
chunk <- c(alldata[1])
chunk_list <- c()
finfo = file.info("/home/gian/Projects/t2_seguranca/video05.mp4")
toread= file("/home/gian/Projects/t2_seguranca/video_05.mp4", "rb")
toread= file("/home/gian/Projects/t2_seguranca/video05.mp4", "rb")
alldata = readBin(toread, "raw", size=1, n = finfo$size, endian="little")
length(alldata)
chunk_size <- 1
chunk <- c(alldata[1])
chunk_list <- c()
for (byte in alldata) {
if (chunk_size %% 1024 == 0) {
block <- paste0(chunk ,collapse = "")
chunk_list <- c(chunk_list, block)
chunk <- ''
}
chunk <- c(chunk, byte)
chunk_size <- chunk_size + 1
}
chunk_index <- length(chunk_list)
block_key <- ""
chunk_list_crypted <- c()
for (index in chunk_index:1) {
block <- chunk_list[index]
block <- paste0(block, block_key)
block_key <- sha256(block)
chunk_list_crypted[index] <- block
}
h0 <- block_key
h0
trabs <- readRDS('/home/gian/Projects/PipeAndCrud/database/trabs.rds')
trabs
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database
library(testthat)
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
trabs <- readRDS('/home/gian/Projects/PipeAndCrud/database/trabs.rds')
expect_true(database$save(cars))
expect_true(database$save(trabs,'cars'))
expect_error(database$delete('cars'))
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
trabs <- readRDS('/home/gian/Projects/PipeAndCrud/database/trabs.rds')
expect_true(database$save(cars))
expect_true(database$save(trabs,'cars'))
expect_error(database$delete('cars'))
database
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database$read('trabs')
expect_equivalent(trabs,database$read('trabs'))
expect_true(database$save(cars))
expect_true(database$save(trabs,'cars'))
expect_equivalent(trabs,database$read('trabs'))
trabs
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
trabs <- readRDS('/home/gian/Projects/PipeAndCrud/database/trabs.rds')
expect_true(database$save(cars))
expect_true(database$save(trabs,'cars'))
expect_error(database$delete('cars'))
database
expect_true(database$save(cars))
expect_true(database$save(trabs,'cars'))
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database
expect_equivalent(trabs,database$read('trabs'))
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database
file.remove('/home/gian/Projects/PipeAndCrud/database/database')
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
database
trabs <- readRDS('/home/gian/Projects/PipeAndCrud/database/trabs.rds')
expect_true(database$save(cars))
expect_true(database$save(trabs,'cars'))
expect_error(database$delete('cars'))
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
expect_equivalent(trabs,database$read('trabs'))
database
file.remove('/home/gian/Projects/PipeAndCrud/database/database')
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
trabs <- readRDS('/home/gian/Projects/PipeAndCrud/database/trabs.rds')
expect_true(database$save(cars))
database <<- PipeAndCrud::init_database( path_to = '/home/gian/Projects/PipeAndCrud/database/')
expect_equivalent(trabs,database$read('trabs'))
database
library(PipeAndCrud)
library(PipeAndCrud)
